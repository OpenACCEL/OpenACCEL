 
cX=cursorX() 
    // x-location of cursor to control queue
cY=cursorY() 
    // y-location of cursor to control queue
help=check(false)
    //  plot the direction of the queue 
queueHit=cursorB()
    // check if the cursor button is down to have the ball rolling
rhoBall=slider(1.4,0.6,4)
    //  radius of the balls 
PR=plot([plotTable,plotShadow,plotBalls,plotHighLight,plotQueue,plotQueue2])
    //  one graph consisting of three balls. The x and y coordinates are
    //  taken from the 'x'- and 'y'-components of the r-vector that has to be transposed in order to get
    //  the x-s and y-s in two separate vectors. 
collDamp=0.6
    //  the damping coefficient for colliding balls 
dT=0.8
    //  to go from physical time to simulation time 
eThreshold=0.5
    //  the minimum kinetic energy for the balls to stay rolling 
halfWay=50
    //  half of the screen; used to correct the queueX and queueY coordinates 
mBall=5
    //  mass of the balls 
maxX=40 
    // determine the area of the rolling balls
maxY=25 
    // determine the area of the rolling balls
minX=-40 
    // determine the area of the rolling balls
minY=-25 
    // determine the area of the rolling balls
nBalls=3
    //  nr balls
    //  This is also hard coded in the colors; if the nr balls should change, only the color
    //  arrays have to be updated 
rollDamp=0.994
    //  the damping coefficient for the rolling balls 
col=['red':[255,255,255],'grn':[0,255,255],'blu':[0,255,0]]
    //  colors of the balls: first one is red, two is white, three is yellowish 
cpl=#(i,vSequence(0,nBalls),cplOneBall(i),vAppend)
    //  the couplings matrix containing all info about the relations to ball i,
    //  that is: 'close' to indicate if these two balls are in a collision-state;
    //  if close is true, 'force' is the current reaction force between them. 
cplOneBall(i)=#(j,vSequence(0,nBalls),cond(touch(i,j),['close':true,'force':(mpt(i,j)/m1m2tt(i,j))*tMat[i][j]],['close':false,'force':0]),vAppend)
    //  the cplOneBall vector contains, for ball i, the info for the collisions between this
    //  ball and all other balls.
    //  It sets the value to the boolean 'close', and if close==true, the
    //  current force vector. The derivation of the force vector
    //  is based on conservation of momentum, angular momentum and kinetic energy
    //  in a coordinate-free version. 
eKin=#(i,vSequence(0,nBalls),vDot(p[i],p[i])/(2*m[i]),add)
    //  the kinetic energy 
f=#(i,vSequence(0,nBalls),forceOnOneBall(i),vAppend)
    //  calculate the forces for all balls by concatenating 
forceOnOneBall(i)=#(j,vSequence(0,nBalls),cond(cpl[i][j].close,cpl[i][j].force,0),add)
    //  adding the forces due to all other of balls 
gameState=cond((eKin{1}<eThreshold)&&!queueHit,'hit',cond(queueHit,'roll','hit'))
    //  determine which state we are in 
m=#(i,vSequence(0,nBalls),mBall,vAppend)
    //  the mass of the balls 
m1m2tt(i,j)=(m[i]+m[j])*vDot(tMat[i][j],tMat[i][j])
    //  the product (m1+m2)(t,t): the denominator of the force vector 
mpt(i,j)=-2*vDot(m[j]*p{1}[i]-m[i]*p{1}[j],tMat[i][j])
    //  the product (((m1p2-m2p1)t),t): the numerator of the force vector 
p=if(gameState=='roll',rollDamp*wallCollide(p{1}+f),[['x':0,'y':0],['x':r{1}[1].x-queueX,'y':r{1}[1].y-queueY],['x':0,'y':0]])
    //  p is obtained by tame integrating f; at the starting time give the initial momenta. The only
    //  non-vanishing initial momentum is the momentum of ball 1; this is obtained from the queue 
    //  position minus the centre of ball 1. 
plotBalls=[[plotType:'bubble',x:[mode:'data',ref:1],y:[mode:'data',ref:2],diameter:[mode:'data',ref:3],col_r:[mode:'data',ref:4],col_g:[mode:'data',ref:5],col_b:[mode:'data',ref:6]],halfWay+vTranspose(r).x,halfWay+vTranspose(r).y,2*rho,col.red,col.grn,col.blu]
    //  plot the balls 
plotHighLight=[[plotType:'bubble',x:[mode:'data',ref:1],y:[mode:'data',ref:2],diameter:0.75*rhoBall,col_r:255,col_g:255,col_b:255],halfWay+0.1*rhoBall+vTranspose(r).x,halfWay+0.5*rhoBall+vTranspose(r).y]
    //  plot the highlights on the balls 
plotQueue=cond(gameState=='hit',[[plotType:'line',col_b:0,col_g:0,col_r:0,x:[mode:'data',ref:1],y:[mode:'data',ref:2]],halfWay+[queueX,r{1}[1].x],halfWay+[queueY,r{1}[1].y]],[[plotType:'line',x:[mode:'data',ref:1],y:[mode:'data',ref:2]],[0,0],[0,0]]) 
plotQueue2=cond(gameState=='hit'&&help,[[plotType:'line',col_g:100,col_r:0,width:0.4,x:[mode:'data',ref:1],y:[mode:'data',ref:2]],halfWay+[10*(r{1}[1].x-queueX)+queueX,r{1}[1].x],halfWay+[10*(r{1}[1].y-queueY)+queueY,r{1}[1].y]],[[plotType:'line',x:[mode:'data',ref:1],y:[mode:'data',ref:2]],[0,0],[0,0]])
    //  the queue is drawn when in hit-mode 
plotShadow=[[plotType:'bubble',x:[mode:'data',ref:1],y:[mode:'data',ref:2],diameter:2*rhoBall,col_r:0,col_g:0,col_b:0,col_a:0.5],halfWay-0.15*rhoBall+vTranspose(r).x,halfWay-0.5*rhoBall+vTranspose(r).y]
    //  plot the shadows beneath the balls 
plotTable=[[plotType:'vbar',x:50,yBase:25,width:80,height:50,col_r:0,col_g:128],[]]
    //  plot the table 
queueX=cX-halfWay 
queueY=cY-halfWay
    //  the queue end position is derived from the location of the cursor 
r=if(gameState=='roll',r{1}+dT*p/m,cond(time==1,#(i,vSequence(0,nBalls),['x':halfWay*(random()-0.5),'y':0.5*halfWay*(random()-0.5)],vAppend),r{1}))
    //  r is obtained by integrating v; at the starting time (==1) give the initial random positions 
rho=#(i,vSequence(0,nBalls),rhoBall,vAppend)
    //  the radii of the balls 
tMat=#(i,vSequence(0,nBalls),tMatOneBall(i),vAppend)
    //  the tMatrix contains, for every pair, i-j, the t-vector between the centres 
tMatOneBall(i)=#(j,vSequence(0,nBalls),tVec(i,j),vAppend)
    //  the tMatOneBall vector contains, for every ball,
    //  the the t-vectors between its centre and the other centres 
tVec(i,j)=r{1}[j]-r{1}[i]
    //  the vector pointing from ball i to ball j, with coefficients x and y 
time=time{1}+1 
touch(i,j)=((vNormEuclid(tMat[i][j])<(rho[i]+rho[j]))&&(i!=j)&&vDot(tMat[i][j],p{1}[i]/m[i]-p{1}[j]/m[j])>0)
    //  condition for colliding contact. Three terms:
    //  1. Are the balls close enough?
    //  2. No self-collision?
    //  3. Is the relative velocity opposite to the vector connecting the centres? 
wallCollide(a)=wallCollideLeft(wallCollideRight(wallCollideBottom(wallCollideTop(a))))
    //  the collisions with all walls 
wallCollideBottom(a)=#(i,vDom(a),cond((r{1}[i].y>(minY+rho[i]))||(a[i].y>0),a[i],['x':collDamp*a[i].x,'y':-collDamp*a[i].y]),vAppend)
    //  collide bottom wall 
wallCollideLeft(a)=#(i,vDom(a),cond((r{1}[i].x>(minX+rho[i]))||(a[i].x>0),a[i],['x':-collDamp*a[i].x,'y':collDamp*a[i].y]),vAppend)
    //  collide left wall 
wallCollideRight(a)=#(i,vDom(a),cond((r{1}[i].x<(maxX-rho[i]))||(a[i].x<0),a[i],['x':-collDamp*a[i].x,'y':collDamp*a[i].y]),vAppend)
    //  collide right wall 
wallCollideTop(a)=#(i,vDom(a),cond((r{1}[i].y<(maxY-rho[i]))||(a[i].y<0),a[i],['x':collDamp*a[i].x,'y':-collDamp*a[i].y]),vAppend)
    //  collide top wall
    // [['n':'cX','x':11.1,'y':89.8],['n':'cY','x':5.9,'y':90.8],['n':'help','x':9.1,'y':94.8],['n':'queueHit','x':14.6,'y':93.7],['n':'rhoBall','x':19.7,'y':93.3],['n':'PR','x':93.7,'y':55.8],['n':'plotTable','x':15.6,'y':5.5],['n':'plotShadow','x':80.1,'y':32.5],['n':'plotBalls','x':81,'y':67],['n':'plotHighLight','x':84.5,'y':89.1],['n':'plotQueue','x':74.1,'y':73.2],['n':'plotQueue2','x':91.6,'y':78.4],['n':'collDamp','x':6.1,'y':15.1],['n':'dT','x':11.1,'y':15.7],['n':'eThreshold','x':20.3,'y':7.1],['n':'halfWay','x':5.7,'y':10.1],['n':'mBall','x':10.6,'y':5.7],['n':'maxX','x':7,'y':24.8],['n':'maxY','x':20.4,'y':12.2],['n':'minX','x':16.1,'y':15.6],['n':'minY','x':15.7,'y':10.5],['n':'nBalls','x':7.7,'y':19.9],['n':'rollDamp','x':10.7,'y':10.8],['n':'col','x':5.5,'y':5.2],['n':'cpl','x':56.7,'y':80.6],['n':'cplOneBall','x':56.7,'y':30.6],['n':'touch','x':46.1,'y':51.6],['n':'mpt','x':52.5,'y':44],['n':'m1m2tt','x':50.4,'y':56.8],['n':'tMat','x':40,'y':39.1],['n':'eKin','x':73.9,'y':44.6],['n':'p','x':72,'y':52.5],['n':'m','x':28.5,'y':46.9],['n':'f','x':70.4,'y':66.4],['n':'forceOnOneBall','x':66.6,'y':78.4],['n':'gameState','x':47.6,'y':74.6],['n':'wallCollide','x':61.8,'y':69.6],['n':'r','x':78.9,'y':60],['n':'queueX','x':60.4,'y':62.2],['n':'queueY','x':54.4,'y':88.8],['n':'rho','x':35.6,'y':52.4],['n':'time','x':61.5,'y':74.6],['n':'tMatOneBall','x':27.2,'y':34],['n':'tVec','x':26,'y':61.4],['n':'wallCollideLeft','x':49.4,'y':84.4],['n':'wallCollideRight','x':59.3,'y':55.3],['n':'wallCollideBottom','x':48.2,'y':64.2],['n':'wallCollideTop','x':42.5,'y':81.6]]