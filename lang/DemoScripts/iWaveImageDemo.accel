feedback=input(0.2)
    // this controls the magnitude of the feedback
clamped=check(false)
    //  controls if the convolution operator should terminate at the domain boundaries 
damp=slider(0.03,0.0,0.1)
    //  to control the amount of damping
freeze=check(true)
    //  this forces the starting condition to hold 
periodic=check(true)
    //  controls if the convolution operator should be periodically extended 
a=plot([[[plotType:'image',mapR:[mode:'data',ref:1],mapG:[mode:'data',ref:2],mapB:[mode:'data',ref:3],mapA:255],nR,nG,nB]])
    //  plotting an image with variable pixel scaling 
boundaryType=if(periodic,0,if(clamped,1,2)) 
imgB=getChan('postDataBlu')
imgG=getChan('postDataGrn')
imgR=getChan('postDataRed')
    //  this is the image that serves as starting condition for the
    //  propagating wave 
kernel=feedback*[[-0.1,-0.3,-0.1],[-0.3,1.6,-0.3],[-0.1,-0.3,-0.1]]
    //  this approximates a smooth second derivative (2D Mexican hat) 
time=time{1}+1
    //  the standard method to have an increasing timer 
arrB=if(freeze,imgB,nB)
arrG=if(freeze,imgG,nG)
arrR=if(freeze,imgR,nR)
    //  at 'freeze' time, the solution is forced to the initial condition,
    //  otherwise it is the solution as it was.
nB=(2-damp)*arrB{1}-((1-damp)*arrB{2}+iConvolve(arrB{1},kernel,1,1,boundaryType))
nG=(2-damp)*arrG{1}-((1-damp)*arrG{2}+iConvolve(arrG{1},kernel,1,1,boundaryType))
nR=(2-damp)*arrR{1}-((1-damp)*arrR{2}+iConvolve(arrR{1},kernel,1,1,boundaryType))
    //  this is the homogenous solution of the partial differential equation
