step=input(1)
    //  the step size is used both to estimate the
    //  derivatives of f with respect to x and y,
    //  and to make progress during the optimisation. 
x0=input(2.5) 
x1=input(7.5) 
y0=input(2.5) 
y1=input(7.5)
    //  these determine the zeroes of the function f.
    //  Notice that the scaling is such that the iso-contour
    //  image (automatically) fills the entire
    //  plotting area, with (logic) coordinates from 0 to 100
    //  in both x and y. Therefore, in virtue of the range (0...20) of
    //  the horizontal and vertical indices, and in virtue of the division
    //  by 2 in the arguments of f, there is a factor 10 between
    //  the values x0,x1,y0,y1 and screen coordinates:
    //  the point [x0,y0] is mapped to the screen point [10*x0,10*y0],
    //  et cetera. 
m=#(i,vSeq(0,21),row(i),vAppend)
    //  the matrix m consists of 20 rows ... 
row(i)=#(j,vSeq(0,21),f(i/2,j/2),vAppend)
    //  each row consists of 20 values ... 
f(x,y)=sqrt(pow((x-x0)*(x-x1),2)+pow((y-y0)*(y-y1),2))
    //  ... and each value is one sample of the function x. Notice the
    //  zeroes of f: f(x0,y0)=f(x1,y0)=f(x0,y1)=f(x1,y1)=0 
contourPlt=[data:#(i,vSeq(0,10),[iso:i],vAppend),map:m,thickness:[mode:'intp',low:0,high:2],col_r:[mode:'intp',low:0,high:255]]
    // The contourplot shows 10 iso curves at heights ranging from 0 to 10
    // with red values ranging from minimal to maximal and widths ranging from 0 to 3 
stpDscPlt=[locations:[nrLocations:100,x:p.x,y:p.y,rad:0.5+sqrt(f(p.x/10,p.y/10)),fcol_b:255,fcol_r:0,fcol_g:0,fill:'interior']]
    // the steepest descent plot is a moving dot with a trail of 100 points;
    // the coordinates are the x and y coordinates of the point p. So p is in
    // coordinates 0 ... res. To map it to screen coordinates,
    // we multiply by 100/res.
    // The point p should move (converge) to either of the zeroes of f, so either one of
    // the four points [x0,y0], [x0,y1], [x1,y0], or [x1,y1]. Notice that the 
    // diameter of the blob decreases with the
    // value of the function in location p
r=('plot OK'==descartes([[contour:contourPlt],[geometry:stpDscPlt]]))
    //  if everything with respect to plotting goes well, we just see the value 'true' in the
    //  result list 
p=cond(newRun,[x:100*random(),y:100*random()],p{1}-step*d{1})
    //  this is the history of the point p. If the button is pressed,
    //  it receives random coordinates somewhere in the screen's coordinate space;
    //  if the button is not pressed it is a bit displaced from its previous location
    //  over a vector -step*d. According to the steepest descent
    //  algorithm, d should be the gradient of the function we try
    //  to minimize. 
newRun=button()
    //  click the button to start a new optimization run 
pXp=p+step*[x:1,y:0]
    //  the location of p, moved slightly in +x direction 
pXm=p+step*[x:-1,y:0]
    //  the location of p, moved slightly in -x direction 
pYp=p+step*[x:0,y:1]
    //  the location of p, moved slightly in +y direction 
pYm=p+step*[x:0,y:-1]
    //  the location of p, moved slightly in -y direction 
d=[x:dfdx,y:dfdy]
    //  the vector d has as components the partial derivative from f to x
    //  and the partial derivate from f to y, respectively 
dfdx=f(pXp.x/10,p.y/10)-f(pXm.x/10,p.y/10)
    //  estimate the partial derivative of f with respect to x
    //  by taking the difference of f in two argument values, slightly displaced
    //  in x-direction. Notice the division by 10 to account for the difference
    //  between screen coordinates and the coordinates of the zeroes of f 
dfdy=f(p.x/10,pYp.y/10)-f(p.x/10,pYm.y/10)
    //  estimate the partial derivative of f with respect to y
    //  by taking the difference of f in two argument values, slightly displaced
    //  in y-direction. Notice the division by 10 to account for the difference
    //  between screen coordinates and the coordinates of the zeroes of f