amp00=slider(10.0,-20,20)
// these are 16 amplitudes of the ground tone plus 15 overtones 
amp01=slider(0.0,-20,20)
amp02=slider(0.0,-20,20) 
amp03=slider(0.0,-20,20)  
amp04=slider(0.0,-20,20)  
amp05=slider(0.0,-20,20) 
amp06=slider(0.0,-20,20) 
amp07=slider(0.0,-20,20) 
amp08=slider(0.0,-20,20) 
amp09=slider(0.0,-20,20)   
amp10=slider(0.0,-20,20) 
amp11=slider(0.0,-20,20)  
amp12=slider(0.0,-20,20)  
amp13=slider(0.0,-20,20) 
amp14=slider(0.0,-20,20) 
amp15=slider(0.0,-20,20)  
p=descartes([curve,refCurve])  
// plotting the curves
m=16
// sets the number of components
n=64
// sets the number of sampels in the graph
amp=[amp00,amp01,amp02,amp03,amp04,amp05,amp06,amp07,amp08,amp09,amp10,amp11,amp12,amp13,amp14,amp15]
// collect all user-controlled amplitudes into a vector
curve=[locations:[nrLocations:n,x:[mode:'intp'],data:#(i,vSeq(0,n),[y:data[i]],vAppend)],edges:[col_r:255,thickness:2]]
refCurve=[locations:[nrLocations:n,x:[mode:'intp'],data:#(i,vSeq(0,n),[y:ref[i]],vAppend)],edges:[col_g:255,thickness:2]]
// this is the curve we want to approximate
data=#(i,vSequence(0,n),50+wave(i),vAppend)
// calculate n samples of the curve
wave(i)=#(j,vSequence(0,m),amp[j]*sin(i*(j+1)*2*PI/n),add)
// add all components for one sample
ref=#(i,vSequence(0,n),50+(if(i<10,15,if(i>(n-10),-15,if(i>(n/2),15,-15)))),vAppend)
// the reference curve is a block wave
diffGlobal=#(i,vSequence(0,n),abs(data[i]-ref[i]),add)
// this is an absolute difference measure, looking at a large range
diff1=paretoVer(paretoMin(diffGlobal))
diff2=paretoHor(paretoMin(diffGlobal))
// we have 2 pareto quantities so we can have a nice graph
cStr='width:{value:4},col_g:{value:255},x:{mode:intp},y:{mode:data,ref:1},nPoints:'+n
// control the looks of the reference curve