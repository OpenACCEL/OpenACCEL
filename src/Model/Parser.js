

define([], function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"script":3,"script_repetition0":4,"script_option0":5,"scriptLine":6,"LINEBREAK":7,"quantity":8,"comment":9,"scriptFinalLine":10,"COMMENT":11,"quantity_group0":12,"quantityDef":13,"quantityName":14,"=":15,"expr":16,"quantityDef_option0":17,"quantityInput":18,"inputCall":19,"quantityInput_option0":20,"IDENTIFIER":21,"quantityFuncDef":22,"quantityFuncName":23,"(":24,"dummy":25,"quantityFuncName_repetition0":26,")":27,"dummy_group0":28,"dummyAdditional":29,",":30,"arith":31,"term":32,"uniArith":33,"binArith":34,"-":35,"+":36,"!":37,"*":38,"/":39,"%":40,"<=":41,"<":42,">=":43,">":44,"==":45,"!=":46,"&&":47,"||":48,"scalarConst":49,"scalarTerm":50,"vectorExpr":51,"NUMBER":52,"STRING":53,"predefinedConstant":54,"PI":55,"E":56,"TRUE":57,"FALSE":58,"brackets":59,"scalarVar":60,"history":61,"quantifier":62,"at":63,"funcCall":64,"vectorCall":65,"scalarVar_group0":66,"{":67,"}":68,"#(":69,"STDFUNCTION":70,"@(":71,"funcCall_option0":72,"funcCall_repetition0":73,"funcCall_option1":74,"funcCall_repetition1":75,"funcCallArgList":76,"INPUTFUNCTION":77,"inputCall_option0":78,"inputCall_repetition0":79,"inputCallArgList":80,"inputCallArgList_group0":81,"[":82,"vectorExpr_option0":83,"]":84,"vectorArgList":85,"vectorElem":86,"vectorArgList_repetition0":87,"vectorAdditionalArg":88,":":89,".":90,"UNIT":91,"inputCall_option0_group0_group0":92,"inputCall_option0_group0":93,"inputCallArgList_group0_group0":94,"$accept":0,"$end":1},
terminals_: {2:"error",7:"LINEBREAK",11:"COMMENT",15:"=",21:"IDENTIFIER",24:"(",27:")",30:",",35:"-",36:"+",37:"!",38:"*",39:"/",40:"%",41:"<=",42:"<",43:">=",44:">",45:"==",46:"!=",47:"&&",48:"||",52:"NUMBER",53:"STRING",55:"PI",56:"E",57:"TRUE",58:"FALSE",67:"{",68:"}",69:"#(",70:"STDFUNCTION",71:"@(",77:"INPUTFUNCTION",82:"[",84:"]",89:":",90:".",91:"UNIT"},
productions_: [0,[3,2],[6,1],[6,2],[6,2],[10,1],[10,1],[9,1],[8,1],[13,4],[18,4],[14,1],[22,3],[23,5],[25,1],[29,2],[16,1],[16,1],[31,1],[31,1],[33,2],[33,2],[33,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[32,1],[32,1],[32,1],[49,1],[49,1],[49,1],[54,1],[54,1],[54,1],[54,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[59,3],[60,1],[60,1],[61,4],[62,9],[63,5],[64,5],[64,5],[76,2],[19,5],[80,2],[51,3],[85,2],[88,2],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[65,4],[65,3],[65,3],[65,3],[65,3],[4,0],[4,2],[5,0],[5,1],[12,1],[12,1],[12,1],[17,0],[17,1],[20,0],[20,1],[26,0],[26,2],[28,1],[28,1],[28,1],[66,1],[66,1],[72,0],[72,1],[73,0],[73,2],[74,0],[74,1],[75,0],[75,2],[92,1],[92,1],[93,1],[93,2],[78,0],[78,1],[79,0],[79,2],[94,1],[94,1],[81,1],[81,2],[83,0],[83,1],[87,0],[87,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
                            var output = "";

                            // If there are one or multiple scriptlines, wrap each single line in the func macro.
                            if ($$[$0-1]) {
                                var length = $$[$0-1].length;
                                for (var i = 0; i < length; i++) {
                                    if($$[$0-1][i]) {
                                        output += "func(" + $$[$0-1][i] + ")\n";
                                    }
                                }
                            }

                            if ($$[$0]) {
                                output += "func(" + $$[$0] + ")\n";
                            }

                            return output;
                        
break;
case 2:
                            this.$ = null;
                        
break;
case 7: this.$ = null; 
break;
case 8:
                            // Parsing a possible previous line may have filled in the dummies array
                            // if it were a function definition with arguments. Clean it for now.
                            yy.dummies = [];
                            this.$ = $$[$0];
                        
break;
case 9:
                            // Ignore units, there is a seperate parser for those.
                            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
                        
break;
case 10:
                            // Ignore units, there is a seperate parser for those.
                            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
                        
break;
case 11:
                            this.$ = "__" + $$[$0] + "__";
                        
break;
case 12:
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                        
break;
case 13:
                            var funcName = $$[$0-4] + $$[$0-3] + $$[$0-2];
                            if ($$[$0-1] && $$[$0-1].length > 0) {
                                this.$ = funcName + "," + $$[$0-1] + $$[$0];
                            } else {
                                this.$ = funcName + $$[$0];
                            }
                        
break;
case 14:
                            // Intiialize dummies array.
                            if (!yy.dummies) {
                                yy.dummies = [];
                            }

                            if (yy.dummies.indexOf($$[$0]) > -1) {
                                // Already defined, which is not allowed.
                                yy.parseError($$[$0] + " is already defined as dummy-variable", {
                                    text: $$[$0],
                                    loc: this._$
                                });
                            }

                            yy.dummies.push($$[$0]);
                            this.$ = $$[$0];
                        
break;
case 15:
                            this.$ = $$[$0];
                        
break;
case 20: this.$ = "uniminus(" + $$[$0] + ")"; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = "not(" + $$[$0] + ")"; 
break;
case 23: this.$ = "add(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 24: this.$ = "subtract(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 25: this.$ = "multiply(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 26: this.$ = "divide(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 27: this.$ = "modulo(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 28: this.$ = "lessThanEqual(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 29: this.$ = "lessThan(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 30: this.$ = "greaterThanEqual(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 31: this.$ = "greaterThan(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 32: this.$ = "equal(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 33: this.$ = "notEqual(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 34: this.$ = "and(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 35: this.$ = "or(" + $$[$0-2] + "," + $$[$0] + ")"; 
break;
case 42: this.$ = "Math.PI"; 
break;
case 43: this.$ = "Math.E"; 
break;
case 44: this.$ = "true"; 
break;
case 45: this.$ = "false"; 
break;
case 53: 
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                        
break;
case 54:
                            if (yy.dummies && yy.dummies.indexOf($$[$0]) > -1) {
                                this.$ = $$[$0];
                            } else {
                                this.$ = "this." + $$[$0] + "()";
                            }
                        
break;
case 55:
                            // check if this function name is used as a parameter or dummy
                            // which is allowed. But using a function name as quantity
                            // is not.
                            if (yy.dummies && yy.dummies.indexOf($$[$0]) > -1) {
                                this.$ = $$[$0];
                            } else {
                                yy.parseError($$[$0] + " is a standard ACCEL function", {
                                    text: $$[$0],
                                    loc: this._$
                                });
                            }
                        
break;
case 56:
                            if (yy.dummies && yy.dummies.indexOf($$[$0-3]) > -1) {
                                // Cannot ask for the history of a parameter.
                                yy.parseError("Dummy variables cannot have history", {
                                    text: "history of " + $$[$0-3],
                                    loc: this._$
                                });
                            }

                            // If the quantity is not a dummy variable, we are guaranteed it is in the format
                            // 'this.__$$[$0-3]__()'. We can use this information to pass the quantity string to the library function.
                            var qty = $$[$0-3].split("__")[1];
                            this.$ = "history('__" + qty + "__'," + $$[$0-1] + ")";
                        
break;
case 57:
                                // Remove the dummy variable from the list.
                                var idx = yy.dummies.indexOf($$[$0-7]);
                                yy.dummies.splice(idx,1);
                                this.$ = "quantifier(" + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
                            
break;
case 58: this.$ = "at(" + $$[$0-3] + $$[$0-2] + $$[$0-1] +  $$[$0]; 
break;
case 59:
                            var funcname;
                            if($$[$0-4] === 'if' || $$[$0-4] === 'do') {
                                // Needs underscores as it is a javascript keyword.
                                funcname = "__" + $$[$0-4] + "__";
                            } else {
                                funcname = $$[$0-4];
                            }
                            var funcCall = funcname + $$[$0-3] + ($$[$0-2] || '');
                            if ($$[$0-1] && $$[$0-1].length > 0) {
                                this.$ = funcCall + "," + $$[$0-1] + $$[$0];
                            } else {
                                this.$ = funcCall + $$[$0];
                            }
                        
break;
case 60:
                            var funcCall = "this." + $$[$0-4] + $$[$0-3] + ($$[$0-2] || "");
                            if ($$[$0-1] && $$[$0-1].length > 0) {
                                this.$ = funcCall + "," + $$[$0-1] + $$[$0];
                            } else {
                                this.$ = funcCall + $$[$0];
                            }
                        
break;
case 61:
                            this.$ = $$[$0];
                        
break;
case 62:
                            this.$ = "null";
                        
break;
case 63:
                            this.$ = $$[$0];
                        
break;
case 64:
                            if ($$[$0-1] && $$[$0-1].length > 0)  {
                                this.$ = "objectToArray({" + ($$[$0-1] || "") + "})";
                            }
                            else {
                                this.$ = "[]";
                            }
                        
break;
case 65:
                            var counter = 0;

                            function createElement(elemObj) {
                                return (elemObj.index || "'" + counter++ + "'") + ":" + elemObj.value;
                            }

                            var result = createElement($$[$0-1]);

                            for(var key in $$[$0]) {
                                result += "," + createElement($$[$0][key]);
                            }
                            this.$ = result;
                        
break;
case 66:
                            this.$ = $$[$0];
                        
break;
case 67:
                            this.$ = { index:  $$[$0-2], value: $$[$0]};
                        
break;
case 68:
                            this.$ = { index: "'" + $$[$0-2] + "'", value: $$[$0]};
                        
break;
case 69:
                            this.$ = { index: "'" + $$[$0-2] + "'", value: $$[$0]};
                        
break;
case 70:
                            this.$ = { index: "'" + $$[$0-2] + "'", value: $$[$0]};
                        
break;
case 71:
                            this.$ = { index: "'" + $$[$0-2] + "'", value: $$[$0]};
                        
break;
case 72:
                            this.$ = { value: $$[$0] };
                        
break;
case 73: this.$ = "at(" + $$[$0-3] + ", " + $$[$0-1] + ")"; 
break;
case 74: this.$ = "at(" + $$[$0-2] + ", '" + $$[$0] + "')"; 
break;
case 75: this.$ = "at(" + $$[$0-2] + ", '" + $$[$0] + "')"; 
break;
case 76: this.$ = "at(" + $$[$0-2] + ", '" + $$[$0] + "')"; 
break;
case 77: this.$ = "at(" + $$[$0-2] + ", " + $$[$0] + ")"; 
break;
case 78:this.$ = [];
break;
case 79:$$[$0-1].push($$[$0]);
break;
case 89:this.$ = [];
break;
case 90:$$[$0-1].push($$[$0]);
break;
case 98:this.$ = [];
break;
case 99:$$[$0-1].push($$[$0]);
break;
case 102:this.$ = [];
break;
case 103:$$[$0-1].push($$[$0]);
break;
case 110:this.$ = [];
break;
case 111:$$[$0-1].push($$[$0]);
break;
case 118:this.$ = [];
break;
case 119:$$[$0-1].push($$[$0]);
break;
}
},
table: [{1:[2,78],3:1,4:2,7:[2,78],11:[2,78],21:[2,78]},{1:[3]},{1:[2,80],5:3,6:4,7:[1,6],8:7,9:8,10:5,11:[1,10],12:9,13:11,14:14,18:12,21:[1,16],22:13,23:15},{1:[2,1]},{1:[2,79],7:[2,79],11:[2,79],21:[2,79]},{1:[2,81]},{1:[2,2],7:[2,2],11:[2,2],21:[2,2]},{1:[2,5],7:[1,17]},{1:[2,6],7:[1,18]},{1:[2,8],7:[2,8]},{1:[2,7],7:[2,7]},{1:[2,82],7:[2,82]},{1:[2,83],7:[2,83]},{1:[2,84],7:[2,84]},{15:[1,19],24:[1,20]},{15:[1,21]},{1:[2,11],7:[2,11],15:[2,11],24:[2,11],27:[2,11],30:[2,11],35:[2,11],36:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],67:[2,11],68:[2,11],82:[2,11],84:[2,11],90:[2,11],91:[2,11]},{1:[2,3],7:[2,3],11:[2,3],21:[2,3]},{1:[2,4],7:[2,4],11:[2,4],21:[2,4]},{14:51,16:22,19:23,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,26],82:[1,45]},{14:60,21:[1,16],25:56,28:57,70:[1,58],77:[1,59]},{14:51,16:61,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,85],7:[2,85],17:63,35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],91:[1,77]},{1:[2,87],7:[2,87],20:78,91:[1,79]},{1:[2,16],7:[2,16],27:[2,16],30:[2,16],35:[2,16],36:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16],68:[2,16],84:[2,16],91:[2,16]},{1:[2,17],7:[2,17],27:[2,17],30:[2,17],35:[2,17],36:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17],68:[2,17],84:[2,17],91:[2,17]},{1:[2,95],7:[2,95],24:[1,80],35:[2,95],36:[2,95],38:[2,95],39:[2,95],40:[2,95],41:[2,95],42:[2,95],43:[2,95],44:[2,95],45:[2,95],46:[2,95],47:[2,95],48:[2,95],67:[2,95],82:[2,95],90:[2,95],91:[2,95]},{1:[2,18],7:[2,18],27:[2,18],30:[2,18],35:[2,18],36:[2,18],38:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],44:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18],68:[2,18],84:[2,18],91:[2,18]},{1:[2,19],7:[2,19],27:[2,19],30:[2,19],35:[2,19],36:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],68:[2,19],84:[2,19],91:[2,19]},{1:[2,36],7:[2,36],27:[2,36],30:[2,36],35:[2,36],36:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],68:[2,36],84:[2,36],91:[2,36]},{1:[2,37],7:[2,37],27:[2,37],30:[2,37],35:[2,37],36:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37],68:[2,37],82:[1,81],84:[2,37],90:[1,82],91:[2,37]},{1:[2,38],7:[2,38],27:[2,38],30:[2,38],35:[2,38],36:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38],68:[2,38],84:[2,38],91:[2,38]},{14:51,16:83,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:84,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:85,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,39],7:[2,39],27:[2,39],30:[2,39],35:[2,39],36:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],68:[2,39],84:[2,39],91:[2,39]},{1:[2,40],7:[2,40],27:[2,40],30:[2,40],35:[2,40],36:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],68:[2,40],84:[2,40],91:[2,40]},{1:[2,41],7:[2,41],27:[2,41],30:[2,41],35:[2,41],36:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],68:[2,41],84:[2,41],91:[2,41]},{1:[2,46],7:[2,46],27:[2,46],30:[2,46],35:[2,46],36:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],68:[2,46],82:[2,46],84:[2,46],90:[2,46],91:[2,46]},{1:[2,47],7:[2,47],27:[2,47],30:[2,47],35:[2,47],36:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],67:[1,86],68:[2,47],82:[2,47],84:[2,47],90:[2,47],91:[2,47]},{1:[2,48],7:[2,48],27:[2,48],30:[2,48],35:[2,48],36:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],68:[2,48],82:[2,48],84:[2,48],90:[2,48],91:[2,48]},{1:[2,49],7:[2,49],27:[2,49],30:[2,49],35:[2,49],36:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],68:[2,49],82:[2,49],84:[2,49],90:[2,49],91:[2,49]},{1:[2,50],7:[2,50],27:[2,50],30:[2,50],35:[2,50],36:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],68:[2,50],82:[2,50],84:[2,50],90:[2,50],91:[2,50]},{1:[2,51],7:[2,51],27:[2,51],30:[2,51],35:[2,51],36:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],68:[2,51],82:[2,51],84:[2,51],90:[2,51],91:[2,51]},{1:[2,52],7:[2,52],27:[2,52],30:[2,52],35:[2,52],36:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],68:[2,52],82:[2,52],84:[2,52],90:[2,52],91:[2,52]},{14:51,16:95,21:[1,91],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,94],53:[1,90],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,92],71:[1,54],77:[1,93],82:[1,45],83:87,84:[2,116],85:88,86:89},{1:[2,42],7:[2,42],27:[2,42],30:[2,42],35:[2,42],36:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],68:[2,42],84:[2,42],91:[2,42]},{1:[2,43],7:[2,43],27:[2,43],30:[2,43],35:[2,43],36:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],68:[2,43],84:[2,43],91:[2,43]},{1:[2,44],7:[2,44],27:[2,44],30:[2,44],35:[2,44],36:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],68:[2,44],84:[2,44],91:[2,44]},{1:[2,45],7:[2,45],27:[2,45],30:[2,45],35:[2,45],36:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],68:[2,45],84:[2,45],91:[2,45]},{14:51,16:96,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,54],7:[2,54],24:[1,97],27:[2,54],30:[2,54],35:[2,54],36:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],48:[2,54],67:[2,54],68:[2,54],82:[2,54],84:[2,54],90:[2,54],91:[2,54]},{1:[2,55],7:[2,55],27:[2,55],30:[2,55],35:[2,55],36:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],67:[2,55],68:[2,55],82:[2,55],84:[2,55],90:[2,55],91:[2,55]},{14:60,21:[1,16],25:98,28:57,70:[1,58],77:[1,59]},{14:51,16:99,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,94],7:[2,94],24:[1,100],27:[2,94],30:[2,94],35:[2,94],36:[2,94],38:[2,94],39:[2,94],40:[2,94],41:[2,94],42:[2,94],43:[2,94],44:[2,94],45:[2,94],46:[2,94],47:[2,94],48:[2,94],67:[2,94],68:[2,94],82:[2,94],84:[2,94],90:[2,94],91:[2,94]},{26:101,27:[2,89],30:[2,89]},{27:[2,14],30:[2,14]},{27:[2,91],30:[2,91]},{27:[2,92],30:[2,92]},{27:[2,93],30:[2,93]},{1:[2,12],7:[2,12],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{1:[2,95],7:[2,95],27:[2,95],30:[2,95],35:[2,95],36:[2,95],38:[2,95],39:[2,95],40:[2,95],41:[2,95],42:[2,95],43:[2,95],44:[2,95],45:[2,95],46:[2,95],47:[2,95],48:[2,95],67:[2,95],68:[2,95],82:[2,95],84:[2,95],90:[2,95],91:[2,95]},{1:[2,9],7:[2,9]},{14:51,16:102,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:103,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:104,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:105,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:106,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:107,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:108,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:109,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:110,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:111,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:112,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:113,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:114,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,86],7:[2,86]},{1:[2,10],7:[2,10]},{1:[2,88],7:[2,88]},{27:[2,108],30:[2,108],35:[1,120],36:[1,119],49:117,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],78:115,92:118,93:116},{14:51,16:121,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{21:[1,122],52:[1,125],70:[1,123],77:[1,124]},{1:[2,20],7:[2,20],27:[2,20],30:[2,20],35:[2,20],36:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],68:[2,20],84:[2,20],91:[2,20]},{1:[2,21],7:[2,21],27:[2,21],30:[2,21],35:[2,21],36:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],68:[2,21],84:[2,21],91:[2,21]},{1:[2,22],7:[2,22],27:[2,22],30:[2,22],35:[2,22],36:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],68:[2,22],84:[2,22],91:[2,22]},{14:51,16:126,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{84:[1,127]},{84:[2,117]},{30:[2,118],84:[2,118],87:128},{30:[2,40],35:[2,40],36:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],84:[2,40],89:[1,129]},{24:[2,11],30:[2,11],35:[2,11],36:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],67:[2,11],82:[2,11],84:[2,11],89:[1,130],90:[2,11]},{24:[1,100],30:[2,94],35:[2,94],36:[2,94],38:[2,94],39:[2,94],40:[2,94],41:[2,94],42:[2,94],43:[2,94],44:[2,94],45:[2,94],46:[2,94],47:[2,94],48:[2,94],67:[2,94],82:[2,94],84:[2,94],89:[1,131],90:[2,94]},{30:[2,95],35:[2,95],36:[2,95],38:[2,95],39:[2,95],40:[2,95],41:[2,95],42:[2,95],43:[2,95],44:[2,95],45:[2,95],46:[2,95],47:[2,95],48:[2,95],67:[2,95],82:[2,95],84:[2,95],89:[1,132],90:[2,95]},{30:[2,39],35:[2,39],36:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],84:[2,39],89:[1,133]},{30:[2,72],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,72]},{27:[1,134],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{14:51,16:136,21:[1,16],24:[1,50],27:[2,100],30:[2,100],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],74:135,77:[1,62],82:[1,45]},{30:[1,137]},{30:[1,138],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{14:51,16:140,21:[1,16],24:[1,50],27:[2,96],30:[2,96],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],72:139,77:[1,62],82:[1,45]},{27:[1,141],29:142,30:[1,143]},{1:[2,23],7:[2,23],27:[2,23],30:[2,23],35:[2,23],36:[2,23],38:[1,66],39:[1,67],40:[1,68],41:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],68:[2,23],84:[2,23],91:[2,23]},{1:[2,24],7:[2,24],27:[2,24],30:[2,24],35:[2,24],36:[2,24],38:[1,66],39:[1,67],40:[1,68],41:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],68:[2,24],84:[2,24],91:[2,24]},{1:[2,25],7:[2,25],27:[2,25],30:[2,25],35:[2,25],36:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],68:[2,25],84:[2,25],91:[2,25]},{1:[2,26],7:[2,26],27:[2,26],30:[2,26],35:[2,26],36:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26],68:[2,26],84:[2,26],91:[2,26]},{1:[2,27],7:[2,27],27:[2,27],30:[2,27],35:[2,27],36:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],68:[2,27],84:[2,27],91:[2,27]},{1:[2,28],7:[2,28],27:[2,28],30:[2,28],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],68:[2,28],84:[2,28],91:[2,28]},{1:[2,29],7:[2,29],27:[2,29],30:[2,29],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[2,29],42:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],68:[2,29],84:[2,29],91:[2,29]},{1:[2,30],7:[2,30],27:[2,30],30:[2,30],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],68:[2,30],84:[2,30],91:[2,30]},{1:[2,31],7:[2,31],27:[2,31],30:[2,31],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],68:[2,31],84:[2,31],91:[2,31]},{1:[2,32],7:[2,32],27:[2,32],30:[2,32],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[2,32],46:[2,32],47:[2,32],48:[2,32],68:[2,32],84:[2,32],91:[2,32]},{1:[2,33],7:[2,33],27:[2,33],30:[2,33],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[2,33],46:[2,33],47:[2,33],48:[2,33],68:[2,33],84:[2,33],91:[2,33]},{1:[2,34],7:[2,34],27:[2,34],30:[2,34],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[2,34],48:[2,34],68:[2,34],84:[2,34],91:[2,34]},{1:[2,35],7:[2,35],27:[2,35],30:[2,35],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[2,35],68:[2,35],84:[2,35],91:[2,35]},{27:[2,110],30:[2,110],79:144},{27:[2,109],30:[2,109]},{27:[2,106],30:[2,106]},{52:[1,145]},{52:[2,104]},{52:[2,105]},{35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[1,146]},{1:[2,74],7:[2,74],27:[2,74],30:[2,74],35:[2,74],36:[2,74],38:[2,74],39:[2,74],40:[2,74],41:[2,74],42:[2,74],43:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],48:[2,74],68:[2,74],82:[2,74],84:[2,74],90:[2,74],91:[2,74]},{1:[2,75],7:[2,75],27:[2,75],30:[2,75],35:[2,75],36:[2,75],38:[2,75],39:[2,75],40:[2,75],41:[2,75],42:[2,75],43:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],48:[2,75],68:[2,75],82:[2,75],84:[2,75],90:[2,75],91:[2,75]},{1:[2,76],7:[2,76],27:[2,76],30:[2,76],35:[2,76],36:[2,76],38:[2,76],39:[2,76],40:[2,76],41:[2,76],42:[2,76],43:[2,76],44:[2,76],45:[2,76],46:[2,76],47:[2,76],48:[2,76],68:[2,76],82:[2,76],84:[2,76],90:[2,76],91:[2,76]},{1:[2,77],7:[2,77],27:[2,77],30:[2,77],35:[2,77],36:[2,77],38:[2,77],39:[2,77],40:[2,77],41:[2,77],42:[2,77],43:[2,77],44:[2,77],45:[2,77],46:[2,77],47:[2,77],48:[2,77],68:[2,77],82:[2,77],84:[2,77],90:[2,77],91:[2,77]},{35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],68:[1,147]},{1:[2,64],7:[2,64],27:[2,64],30:[2,64],35:[2,64],36:[2,64],38:[2,64],39:[2,64],40:[2,64],41:[2,64],42:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],68:[2,64],84:[2,64],91:[2,64]},{30:[1,149],84:[2,65],88:148},{14:51,16:150,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:151,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:152,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:153,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:154,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,53],7:[2,53],27:[2,53],30:[2,53],35:[2,53],36:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],68:[2,53],82:[2,53],84:[2,53],90:[2,53],91:[2,53]},{27:[2,102],30:[2,102],75:155},{27:[2,101],30:[2,101],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{14:51,16:156,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:157,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{27:[2,98],30:[2,98],73:158},{27:[2,97],30:[2,97],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{15:[2,13]},{27:[2,90],30:[2,90]},{14:60,21:[1,16],25:159,28:57,70:[1,58],77:[1,59]},{27:[1,160],30:[1,162],80:161},{27:[2,107],30:[2,107]},{1:[2,73],7:[2,73],27:[2,73],30:[2,73],35:[2,73],36:[2,73],38:[2,73],39:[2,73],40:[2,73],41:[2,73],42:[2,73],43:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],48:[2,73],68:[2,73],82:[2,73],84:[2,73],90:[2,73],91:[2,73]},{1:[2,56],7:[2,56],27:[2,56],30:[2,56],35:[2,56],36:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],48:[2,56],68:[2,56],82:[2,56],84:[2,56],90:[2,56],91:[2,56]},{30:[2,119],84:[2,119]},{14:51,16:95,21:[1,91],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,94],53:[1,90],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,92],71:[1,54],77:[1,93],82:[1,45],86:163},{30:[2,67],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,67]},{30:[2,68],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,68]},{30:[2,69],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,69]},{30:[2,70],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,70]},{30:[2,71],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76],84:[2,71]},{27:[1,164],30:[1,166],76:165},{30:[1,167],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{27:[1,168],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{27:[1,169],30:[1,166],76:170},{27:[2,15],30:[2,15]},{1:[2,62],7:[2,62],91:[2,62]},{27:[2,111],30:[2,111]},{35:[1,175],36:[1,174],49:172,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],81:171,94:173},{30:[2,66],84:[2,66]},{1:[2,60],7:[2,60],27:[2,60],30:[2,60],35:[2,60],36:[2,60],38:[2,60],39:[2,60],40:[2,60],41:[2,60],42:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],48:[2,60],68:[2,60],82:[2,60],84:[2,60],90:[2,60],91:[2,60]},{27:[2,103],30:[2,103]},{14:51,16:176,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{14:51,16:177,21:[1,16],24:[1,50],31:24,32:25,33:27,34:28,35:[1,32],36:[1,33],37:[1,34],49:29,50:30,51:31,52:[1,35],53:[1,36],54:37,55:[1,46],56:[1,47],57:[1,48],58:[1,49],59:38,60:39,61:40,62:41,63:42,64:43,65:44,66:52,69:[1,53],70:[1,55],71:[1,54],77:[1,62],82:[1,45]},{1:[2,58],7:[2,58],27:[2,58],30:[2,58],35:[2,58],36:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],68:[2,58],82:[2,58],84:[2,58],90:[2,58],91:[2,58]},{1:[2,59],7:[2,59],27:[2,59],30:[2,59],35:[2,59],36:[2,59],38:[2,59],39:[2,59],40:[2,59],41:[2,59],42:[2,59],43:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],48:[2,59],68:[2,59],82:[2,59],84:[2,59],90:[2,59],91:[2,59]},{27:[2,99],30:[2,99]},{27:[2,63],30:[2,63]},{27:[2,114],30:[2,114]},{52:[1,178]},{52:[2,112]},{52:[2,113]},{27:[2,61],30:[2,61],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{30:[1,179],35:[1,65],36:[1,64],38:[1,66],39:[1,67],40:[1,68],41:[1,69],42:[1,70],43:[1,71],44:[1,72],45:[1,73],46:[1,74],47:[1,75],48:[1,76]},{27:[2,115],30:[2,115]},{70:[1,180]},{27:[1,181]},{1:[2,57],7:[2,57],27:[2,57],30:[2,57],35:[2,57],36:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],43:[2,57],44:[2,57],45:[2,57],46:[2,57],47:[2,57],48:[2,57],68:[2,57],82:[2,57],84:[2,57],90:[2,57],91:[2,57]}],
defaultActions: {3:[2,1],5:[2,81],88:[2,117],119:[2,104],120:[2,105],141:[2,13],174:[2,112],175:[2,113]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

    /** Define error handler */
    yy.parser.parseError = this.parseError = yy.parseError = function(message, hash) {
        yy.dummies = [];
        throw {message: message, hash: hash};
    }

    /** List of all ACCEL user-input functions */
    yy.inputfunctions = [
        /* Input elements */
        'slider',
        'input',
        'check',
        'button'
    ];

    /** List of all built-in ACCEL functions */
    yy.stdfunctions = [
        /** Functions */
        'abs',
        'acos',
        'add',
        'and',
        'asin',
        'atan',
        'atan2',
        'bin',
        'ceil',
        'cond',
        'cos',
        'cursorB',
        'cursorX',
        'cursorY',
        'debug',
        'divide',
        'do',
        'equal',
        'exp',
        'factorial',
        'floor',
        'getChan',
        'getTime',
        'getUrl',
        'greaterThan',
        'greaterThanEqual',
        'iConvolve',
        'iGaussian',
        'iMake',
        'iMedian',
        'iSpike',
        'if',
        'imply',
        'lessThan',
        'lessThanEqual',
        'ln',
        'log',
        'max',
        'min',
        'modulo',
        'multiply',
        'not',
        'notEqual',
        'or',
        'paretoHor',
        'paretoMax',
        'paretoMin',
        'paretoVer',
        'plot',
        'poisson',
        'pow',
        'putChan',
        'ramp',
        'random',
        'round',
        'sin',
        'sqrt',
        'subtract',
        'tan',
        'uniminus',
        'vAggregate',
        'vAppend',
        'vConcat',
        'vConvolve',
        'vDom',
        'vDot',
        'vEigenSystem',
        'vExtend',
        'vGaussian',
        'vLen',
        'vMake',
        'vMatInverse',
        'vMatMatMul',
        'vMatSolve',
        'vNormAbs',
        'vNormEuclid',
        'vNormFlat',
        'vNormSq',
        'vNormalize',
        'vRange',
        'vSegment',
        'vSeq',
        'vSequence',
        'vSpike',
        'vTranspose',
        'vVecRamp'
    ];

    yy.reservedwords =
    [
        'true',
        'false',
        'PI',
        'E'
    ];
    yy.reservedwords.push.apply(yy.reservedwords, yy.inputfunctions);
    yy.reservedwords.push.apply(yy.reservedwords, yy.stdfunctions);

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Ignore all whitespace characters except newlines */ 
break;
case 1: return 7;   
break;
case 2: return 52;      
break;
case 3: yy_.yytext = yy_.yytext.slice(2); return 11; 
break;
case 4: return 53;      
break;
case 5: yy_.yytext = this.matches[1].trim(); return 91; 
break;
case 6: return 55;          
break;
case 7: return 56;           
break;
case 8: return 57;        
break;
case 9: return 58;       
break;
case 10:
                                                                if (yy.stdfunctions.indexOf(yy_.yytext) > -1) {
                                                                    return 70;
                                                                } else if (yy.inputfunctions.indexOf(yy_.yytext) > -1) {
                                                                    return 77;
                                                                } else {
                                                                    return 21;
                                                                }
                                                            
break;
case 11: return 24;       
break;
case 12: return 27;       
break;
case 13: return 67;       
break;
case 14: return 68;       
break;
case 15: return 82;       
break;
case 16: return 84;       
break;
case 17: return 90;       
break;
case 18: return 30;       
break;
case 19: return 89;       
break;
case 20: return ';';       
break;
case 21: return 69;      
break;
case 22: return 71;      
break;
case 23: return 36;       
break;
case 24: return 35;       
break;
case 25: return 46;      
break;
case 26: return 37;       
break;
case 27: return 38;       
break;
case 28: return 39;       
break;
case 29: return 40;       
break;
case 30: return 41;      
break;
case 31: return 42;       
break;
case 32: return 43;      
break;
case 33: return 44;       
break;
case 34: return 45;      
break;
case 35: return 47;      
break;
case 36: return 48;      
break;
case 37: return 15;       
break;
}
},
rules: [/^(?:[^\S\n]+)/,/^(?:(\r)?\n)/,/^(?:((?:\d+))((?:\.[0-9]+))?((?:[eE][0-9]+))?\b)/,/^(?:\/\/([^\n])*)/,/^(?:(["][^\"]*["])|(['][^\']*[']))/,/^(?:\s*;(.*))/,/^(?:\bPI\b)/,/^(?:\bE\b)/,/^(?:\btrue\b)/,/^(?:\bfalse\b)/,/^(?:\b\w*[a-zA-Z_]\w*\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:#\()/,/^(?:@\()/,/^(?:\+)/,/^(?:-)/,/^(?:!=)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
return parser;
});