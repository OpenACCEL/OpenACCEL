 
r=if(reset,r0,r{1}+v{1}*dt)
    // This script models an excited pendulum. One example of a system,
    // described by an excited pendulum is someone chiming a bell
    // by rhythmically pulling a rope (like monks in a monastery!)
    // The pendulum is a swinging point mass with location r=r(t),
    // on a rope with rest length restLength, fixed to a hinge point
    // rOsc. This point rOsc is oscillating vertically.
    // The expression for r is r0 if reset==true, that is, if
    // the reset-button is clicked; otherwise it is found by integrating
    // the velocity. r{1} and v{1} are the 
    // location and velocity on one previous time step, respectively;
    // dt is the (Euler) time step.
v=if(reset,v0,v{1}+a{1}*dt)
    //  velocity of the point mass is found by integrating
    //  acceleration. v{1} means: velocity at previous time step.
    //  If reset==true, velocity is reset to initial velocity, v0 
reset=button()
    //  to reset everything to initial conditions 
a=if(reset,a0,[x:0,y:g]+f{1}*vNormalize(r{1}-rOsc)-v{1}*damp/dt)
    //  acceleration is gravity plus controller force plus damping.
    //  [x:...,y:...] is the notation fo a vector with elements called x and y.
    //  Acceleration is only in action if not reset.
    //  Mass is taken dimensionless and equal to 1.
    //  Controller force is used to keep distance between r and hinge point (rOsc)
    //  equal, i.e., it attempts to fix the length of the pendulum.
    //  The controller force works parallel to the rod, hence the use of the (dimensionless) unit vector
    //  vNormalize(r{1}-rOsc). This is the unit vector pointing from
    //  rOsc to r{1}. The (scalar) factor f is the strength of the controller.
    //  Damping is modeled as proportional-to-velocity damping with damping strength 'damp'.
    //  The factor dt serves to keep dimensions correct. f has dimension length/time^2; 
rOsc=[x:50,y:50+yAmp*sin(omega*t+phase)]
    //  the motion of the oscillating hinge point: ampltide yAmp, frequency omega 
err=if(reset,0,restLength-vNormEuclid(r{1}-rOsc))
    //  to drive the controller, we need the error between set value and 'is'-value.
    //  The function vNormEuclid computes Euclidean distance 
restLength=slider(20,10.0,40.0)
    //  rest length of the pendulum 
f=if(reset,f0,prop*err+diff*(err-err{1})/dt)/(dt*dt)
    //  the strength of the controller. Two contributions:
    //  * a proportional controller, proportional to err with factor prop
    //  * a differential controller, proportional to the time derivative of err with factor diff
    //  The dimension of f is length/time^2 
omega=slider(1.0,0.0,20)
    //  The frequency of the vertically oscillating hinge point 
yAmp=slider(5.0,0.0,25.0)
    //  The amplitude of the vertically oscillating hinge point 
r0=[x:20,y:50]
    //  Initial location of the point mass 
v0=[x:0,y:0]
    //  Initial velocity of the point mass 
a0=[x:0,y:0]
    //  Initial acceration of the point mass 
f0=0
    //  Initial strength of the controller 
dt=slider(0.02,0.01,0.1)
    //  Time step 
g=slider(-2,-3.0,3.0)
    //  Gravity (could be upside down, this helps to manoeuvre the pendulum in an upside-fown position) 
prop=slider(0.005,-0.01,0.01)
    //  Strength of the proportional controller 
diff=slider(0.005,-0.01,0.01)
    //  Strength of the differential controller 
pr=plot([[[plotType:'line',x:[mode:'data',ref:1],y:[mode:'data',ref:2],width:10,col_b:0],[rOsc.x,rOsc.x],[50-yAmp,50+yAmp]],[[plotType:'line',width:3,x:[mode:'data',ref:1],y:[mode:'data',ref:2],col_r:0],[r.x,rOsc.x],[r.y,rOsc.y]],[[plotType:'bubble',x:[mode:'data',ref:1],y:[mode:'data',ref:2],diameter:6,col_g:0],[r.x],[r.y]]])
    //  This function plots the pendulum 
damp=slider(0.001,0,0.1)
    //  This is the velocity-proportional damping 
phase=slider(0,0,6.28) 
errPercent=max(0.1,abs(err/restLength)*100)
    //  This value is printed in the results-box; it gives an indication of how well the controller performs
    //  expressed as a percentage. The max avoids printing unrealistically small values
    //  with much leading zeroes that would make the display jump 
t=if(reset,0,t{1}+dt)
    //  this makes the time clock tick
    //  Data below only serves to plot the expressions as a graph [['n':'r','x':72.1,'y':27.2],['n':'reset','x':39.9,'y':93.6],['n':'r0','x':16.8,'y':6.8],['n':'v','x':72.1,'y':35.2],['n':'dt','x':13.5,'y':61.2],['n':'v0','x':33.9,'y':5.2],['n':'a','x':86.6,'y':60],['n':'g','x':8.6,'y':64.9],['n':'a0','x':11.8,'y':7.9],['n':'f','x':86,'y':32.4],['n':'rOsc','x':78.9,'y':20.3],['n':'damp','x':5.8,'y':80.7],['n':'m','x':50.5,'y':70],['n':'yAmp','x':5.9,'y':60.5],['n':'omega','x':28.9,'y':70.5],['n':'t','x':77.2,'y':26.3],['n':'err','x':89.4,'y':28.7],['n':'restLength','x':34,'y':61],['n':'f0','x':48.7,'y':7],['n':'prop','x':12.5,'y':81.3],['n':'diff','x':40.3,'y':61.4],['n':'pr','x':94.8,'y':58.8]]