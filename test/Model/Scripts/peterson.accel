d=plot([edges,nodes])
//  the graph constist of two parts: nodes and edges
// this demo shows how a graph can be plotted. As
// an example we use the so called Peterson graph: thew complete graph on 5 points. 
e1=['e1':0,'e2':1,'w':3,'r':255,'t':'edge1']
e10=['e1':4,'e2':1,'w':3,'r':0,'t':'edge10']
e2=['e1':1,'e2':2,'w':3,'r':255,'t':'edge2']
e3=['e1':2,'e2':3,'w':3,'r':255,'t':'edge3']
e4=['e1':3,'e2':4,'w':3,'r':255,'t':'edge4']
e5=['e1':4,'e2':0,'w':5,'r':255,'t':'edge5']
e6=['e1':0,'e2':2,'w':5,'r':0,'t':'edge6']
e7=['e1':1,'e2':3,'w':5,'r':0,'t':'edge7']
e8=['e1':2,'e2':4,'w':5,'r':0,'t':'edge8']
e9=['e1':3,'e2':0,'w':5,'r':0,'t':'edge9']
//  in a simple version, an edge has two references to nodes
// (e1 and e2), a width and one color attribute- e.g., red. It also
// has a name, the t-attribute.
eStr=[plotType:'vector',type:'segment',x1:[mode:'data',ref:1],x2:[mode:'data',ref:2],y1:[mode:'data',ref:3],y2:[mode:'data',ref:4],width:[mode:'data',ref:5],col_r:[mode:'data',ref:6],tag:[mode:'data',ref:7]]
    //  this instructs Descartes to draw a sequence of vectors, in this case line segments with no error heads.
    // Notice that we only specify the x1,x2,y1,y2 coordinates of the extremes, the width, one color
    // component and a tag; all other attributes are left unspecified and therefore take random values.
n1=['x':10,'y':75,'w':10,'r':128,'t':'node1']  
n2=['x':50,'y':90,'w':10,'r':128,'t':'node2']
n3=['x':90,'y':75,'w':10,'r':128,'t':'node3']
n4=['x':75,'y':10,'w':10,'r':128,'t':'node4']
n5=['x':25,'y':10,'w':10,'r':128,'t':'node5']
    //  in a simple form, a node has two coordinates, a size, a color attribute, and a name: the t-attribute
nStr=[plotType:'bubble',x:[mode:'data',ref:1],y:[mode:'data',ref:2],diameter:[mode:'data',ref:3],col_r:[mode:'data',ref:4],tag:[mode:'data',ref:5]]
    //  this instructs Descartes to draw a sequence of nodes. We use the 'bubble' primitive to do so,
    // and only specify the x and y coordinates, the diameter, one color attribute (red), and a tag (name). All
    // other propoerties are left unspecified.
e=[e1,e2,e3,e4,e5,e6,e7,e8,e9,e10]
    //  the sequence of edges
eT=vTranspose(e)
    // we take the transpose to get a sequence of vectors, one vector representing the values
    // for each of the edges' attributes.
edges=[eStr,xb,xe,yb,ye,eT.w,eT.r,eT.t]
    //  this is the vector as it is passed to Descartes:
    //  xb: x-coordinates of begin points
    //  xe: x-coordinates of end points
    //  yb: y-coordinates of begin points
    //  ye: y-coordinates of end points
    //  eT.w: width of edges
    //  eT.t: tags of edges
    //  eT.r,eT.g,eT.b: color of edges 
n=[n1,n2,n3,n4,n5]
    //  the sequence of nodes
nT=vTranspose(n)
    // we take the transpose to get a sequence of vectors, one vector representing the values
    // for each of the nodes' attributes
nodes=[nStr,nT.x,nT.y,nT.w,nT.r,nT.t]
    //  nT.x: x-coordinates of nodes
    //  nT.y: x-coordinates of nodes
    //  nT.w: width (diameter) of nodes
    //  nT.r,nT.g,nT.b: color of nodes
    //  nT.t: tags of nodes 
xb=#(i,vDom(e),n[e[i].e1].x,vAppend)
    //  take the x-coordinates of the first endpoint all the edges as a single vector
xe=#(i,vDom(e),n[e[i].e2].x,vAppend)
    //  take the x-coordinates of the second endpoint all the edges as a single vector
yb=#(i,vDom(e),n[e[i].e1].y,vAppend)
    //  take the y-coordinates of the first endpoint all the edges as a single vector
ye=#(i,vDom(e),n[e[i].e2].y,vAppend)
    //  take the y-coordinates of the second endpoint all the edges as a single vector