reset=button() 
kernel=[-0.0,-0.3,0,0,0.8,0,0,-0.3,-0.0]/200
// this approximates a smooth second derivative (1D Mexican hat) 
smooth=2*vGaussian(gWidth,gSharp)
// used to make soft bumps. Indeed, hard bumps would introduce high frequent noise
// with a wavelength that is short compared to the sampling rate,
// causing dispersion.
bump=(random()-0.5)*0.1*vConvolve(vSpike(n*random(),n),smooth,5,0) 
// a soft bump is obtained by applying convolution with a gaussian to a spike (at a random location)
xN=max(-1,min(1,(1+factor)*xArr{1}-factor*(xArr{2}+vConvolve(xArr{1},kernel,4,0)))) 
// this is the homogenous solution of the partial differential equation
xArr=if(time<3,vMake(0,n),if(random()>0.98,xN+bump,xN)) 
// the particular solution is the sum of the homogenous solution and
// the initial condition and the perturbation (if there is one)
n=100
    //  how long is the graph 
pl=plot([graph])
    //  plotting 
graph=[ctrl,5+250*xArr,50+50*xArr] 
ctrl=[y:[mode:'data',ref:2],col_r:[mode:'data',ref:1],x:[mode:'intp'],nPoints:n]
    //  experimenting with various types of visuals 
time=if(reset,0,time{1}+1)
    //  the standard method to have an increasing timer 
factor=0.996
    //  to provide a little stabilizing 
gWidth=slider(15,2,100)
// the width of the Gaussians used to smooth the perturbation
gSharp=slider(4,1,30)
// the sharpness of the Gaussians used to smooth the perturbation 